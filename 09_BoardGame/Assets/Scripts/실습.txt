2/1
1. GridPainter 완성하기
	1.1. 가로로 11칸
	1.2. 세로로 11칸
	1.3. 가로 위쪽은 알파벳으로 위치 표시
	1.4. 세로 왼쪽은 숫자로 위치 표시
	시간 : 9시 40분까지 -> 9시 50분까지

2. GridPainter 코드 확인 및 Board 클래스 구상해보기
	시간 : 10시 50분까지

3. Board 클래스 구현 시작
	3.1. static public Vector2Int IndexToGrid(int index);
	3.2. static public int GridToIndex(Vector2Int grid);
	3.3. public Vector3 GridToWorld(int x, int y);
	3.4. public Vector2Int WorldToGrid(Vector3 worldPos);
	3.5. public Vector3 IndexToWorld(int index);
	시간 : 1시 20분까지

2/2
1. Test_ShipDeployment에서 보드 위를 클릭했을 때 배치 가능한 장소라면 함선을 배치하기
	1.1. 배치할 배는 항공모함으로 하기
	1.2. 함선이 완전히 배치 불가능한 위치면 배치 하지 않기(배치 불가능한 위치 : 보드 밖이나 다른 함선이 배치되어 있음)
	시간 : 2시 까지


2/3
1. 코드확인 + Board.IndexToWorld 완성하기
	시간 : 10시 25분까지

2. 코드 확인 + 회전 시키기
	2.1. Test_ShipDeployment 클래스에서 마우스 휠 입력 처리하기
	2.2. 마우스 휠 입력이 있을 때마다 90도씩 돌려주기(내릴 때 시계방향, 올릴때 반시계방향)
	2.3. 회전 구현은 Ship.Rotate에서 처리
	시간 : 1시까지

3. 코드 확인 + 실시간으로 배치 여부 표시하기
	3.1. Test_ShipDeployment 클래스에서 TargetShip을 선택했을 때 
		마우스 위치에서 함선이 배치가능하면 녹색으로 보이기
		마우스 위치에서 함선이 배치불가능하면 빨간색으로 보이기

		활용할 함수
		Ship.SetMaterialType 함수
		ShipManager.SetDeployModeColor 함수
	시간 : 2시 20분까지
	

2/6
1. 코드 확인
2. 함선 랜덤 배치 구상
	시간 : 9시 50분까지

3. 함선 랜덤 배치하기
	3.1. OnRandomDeployment() 구현하기
	3.2. OnResetClick() 구현하기
	3.3. OnTestRClick() 구현하기
	시간 : 12시 20분에 중간 확인 -> 1시까지


2/7
1. 코드 확인
	시간 : 10시 50분까지


2/8
1. 공격 후보지역 표시하기
	1.1. AddHighCandidate 완성하기
		1.1.1. attackHighCandidateIndices에 후보지역 인덱스 추가하기(추가 전, 후 각각 하나씩 고려사항이 있음)
		1.1.2. highCandidatePrefab을 이용해서 후보지역이 눈에 보이도록 만들기
	1.2. AddNeighborToHighCanditate 완성하기
	시간 : 1시 20분까지 -> 1시 30분까지

2/9
1. AddHighCandidataByTwoPosition 완성하기
	시간 : 10시 50분까지

2. 코드 확인 + AddHighCandidataByTwoPosition의 세로 방향 채워 넣기
	시간 : 1시 10분까지

2/10
1.  턴 메니저 구상하기
	시간 : 9시 35분까지

2. 코드 확인
	시간 : 11시 40분까지

2/13
1. 한번에 하나의 토글 버튼만 눌려지게 만들기
	1.1. ShipDeploymentPanel 완성 시키기
	1.2. DeploymentToggle.IsDeployed는 private로 유지할 것
	시간 : 12시 20분까지